import pandas as pd
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor
import sklearn.preprocessing as preprocessing
from sklearn import linear_model

data_train = pd.read_csv('train.csv')
# data_train.info()
# data_train.describe()
# data_train.head()

# Feature engineering
# 1-1 Dealing with nan.If cabin is notnull ,cabin='Yes', null, cabin='No'
def set_Cabin_type(df):
    df.loc[(data_train.Cabin.notnull()), 'Cabin'] = 'Yes'
    df.loc[(data_train.Cabin.isnull()), 'Cabin'] = 'No'
set_Cabin_type(data_train)
data_train.head()
    
# # 1-2 处理Age，使用 RandomForestClassifier 填补缺失的年龄属性
# def set_missing_ages(df):
#     # 把已有的数值型特征取出来丢进Random Forest Regressor中
#     age_df = df[['Age','Fare', 'Parch', 'SibSp', 'Pclass']]
#     # 乘客分成已知年龄和未知年龄两部分
#     known_age = age_df[age_df.Age.notnull()].values
#     unknown_age = age_df[age_df.Age.isnull()].values
#     # y即目标年龄
#     y = known_age[:, 0]
#     # X即特征属性值
#     X = known_age[:, 1:]
#     # fit到RandomForestRegressor之中
#     rfr = RandomForestRegressor(random_state=0, n_estimators=2000, n_jobs=-1)
#     rfr.fit(X, y)  
#     # 用得到的模型进行未知年龄结果预测
#     predictedAges = rfr.predict(unknown_age[:, 1::]) 
#     # 用得到的预测结果填补原缺失数据
#     df.loc[ (df.Age.isnull()), 'Age' ] = predictedAges 
#     return df, rfr
# set_missing_ages(data_train)

# # 1-3 类目型的特征因子化
# dummies_Cabin = pd.get_dummies(data_train['Cabin'], prefix='Cabin')
# dummies_Embarked = pd.get_dummies(data_train['Embarked'], prefix='Embarked')
# dummies_Sex = pd.get_dummies(data_train['Sex'], prefix='Sex')
# dummies_Pclass = pd.get_dummies(data_train['Pclass'], prefix='pclass')
# df = pd.concat([data_train, dummies_Cabin, dummies_Embarked, dummies_Sex, dummies_Pclass], axis=1)
# df.drop(['Pclass', 'Name', 'Sex', 'Ticket', 'Cabin', 'Embarked'], axis=1, inplace=True)
# df

# # 1-4 缩放到[-1,1]之间，scaling
# scaler = preprocessing.StandardScaler()
# age_scale_param = scaler.fit(df['Age'][:, np.newaxis])
# df['Age_scaled'] = scaler.fit_transform(df['Age'][:, np.newaxis], age_scale_param)
# fare_scale_param = scaler.fit(df['Fare'][:, np.newaxis])
# df['Fare_scaled'] = scaler.fit_transform(df['Fare'][:, np.newaxis], fare_scale_param)
# df.head()

# train_df = df.filter(regex='Survived|Age_.*|SibSp|Parch|Fare_.*|Cabin_.*|Embarked_.*|Sex_.*|Pclass_.*')
# train_np = train_df.values
# # print(train_df)
# y = train_np[:, 0]
# X = train_np[:, 1:]

# # 2-1 模型拟合
# clf = linear_model.LogisticRegression(C=1.0, penalty='l1', tol=1e-6)
# clf.fit(X, y)
# # clf

# # 2-2 对测试数据进行预处理
# data_test = pd.read_csv('test.csv')
# data_test.loc[(data_test.Fare.isnull())].values
# tmp_df = data_test[['Age', 'Fare', 'Parch', 'SibSp', 'Pclass']]
# null_age = tmp_df[data_test.Age.isnull()].values
# X = null_age[:, 1:]
# rfr = RandomForestRegressor(random_state=0, n_estimators=2000, n_jobs=-1)

# predictedAges = rfr.predict(X)  #出问题
# data_test.loc[(data_test.Age.isnull()),'Age'] = predictedAges

# data_test = set_Cabin_type(data_test)
# dummies_Cabin = pd.get_dummies(data_test['Cabin'], prefix='Cabin')
# dummies_Embarked = pd.get_dummies(data_test['Embarked'], prefix='Embarked')
# dummies_Sex = pd.get_dummies(data_test['Sex'], prefix='Sex')
# dummies_Pclass = pd.get_dummies(data_test['Pclass'], prefix='Pclass')

# df_test = pd.concat([data_test, dummies_Cabin, dummies_Embarked, dummies_Sex, dummies_Pclass], axis=1)
# df_test.drop(['Pclass', 'Name', 'Sex', 'Ticket', 'Cabin', 'Embarked'], axis=1, inplace=True)
# df_test['Age_scaled'] = scaler.fit_transform(df_test['Age'], age_scale_param)
# df_test['Fare_scaled'] = scaler.fit_transform(df_test['Fare'], fare_scale_param)
# df_test





# # sns.pairplot(train_df['Survived', 'SibSp', 'Parch'], hue='Survived')
